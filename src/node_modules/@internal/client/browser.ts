import {
  createClient,
  dedupExchange,
  cacheExchange,
  fetchExchange,
  ssrExchange,
  type ClientOptions,
  type Client,
} from "@urql/core";

import { devtoolsExchange } from "@internal/client/devtools";

let client: Client;
let ssr: ReturnType<typeof ssrExchange>;

export const readyLookup = {};

export function getClient() {
  assertConfigured();
  return client;
}

export function configureClient(
  config: ClientOptions & {
    fetch?: (
      ...params: [...Parameters<typeof fetch>, typeof fetch]
    ) => ReturnType<typeof fetch>;
  },
) {
  ssr = ssrExchange({ isClient: true });
  let exchanges = [dedupExchange, cacheExchange, ssr, fetchExchange];
  if (process.env.NODE_ENV !== "production" && devtoolsExchange) {
    exchanges.push(devtoolsExchange);
  }

  if (config.exchanges) {
    exchanges = config.exchanges.concat(exchanges);
  }

  client = createClient({
    ...config,
    exchanges,
    fetch: config.fetch
      ? (...params: Parameters<typeof fetch>) => config.fetch!(...params, fetch)
      : fetch,
  });
}

export function hydrateQuery(opKey: string, data: any, error: any) {
  assertConfigured();
  ssr.restoreData({
    [opKey]: {
      data: data ? JSON.stringify(data) : undefined,
      error,
    },
  });
}

function assertConfigured() {
  if (!client) throw new Error("<gql-client> not configured.");
}
